/**
* This is a generic handler for logging your dumb JS errors generated by html popups
*
* 1. Choose logfile from /datum/js_error_file/ or create new
* 2. Include the "code/modules/error_handler_js/error_handler.js" file in your html file (look at browserOutput.html for an example)
* 3. Call attachErrorHandler('file_name'); at the top of your JS (again see browserOutput.js for an example)
*/

var/global/datum/js_error_manager/js_error_manager = new

/datum/js_error_manager
	var/list/log_files = list()

/datum/js_error_manager/New()
	for(var/path in subtypesof(/datum/js_error_file))
		var/datum/js_error_file/D = new path()
		log_files[D.file_name] = D

/datum/js_error_manager/proc/log_error(name, message, client/C)
	if (!config.log_js_error || !name || !message)
		return

	if (!log_files[name])
		warning("JS error handler: not valid file name: '[name]'")
		log_debug("JS error handler: not valid file name: '[name]'")
		return
	
	var/datum/js_error_file/D = log_files[name]
	D.write_error(message, C)

/datum/js_error_file/
	var/file
	var/file_name
	var/file_size_limit = 1000000 // ~1mb?
	var/blocked = FALSE           // don't write log if hit size limit

/datum/js_error_file/browserOutput
	file_name = "browserOutput"

/datum/js_error_file/nanoui
	file_name = "nanoui"

/datum/js_error_file/browser
	file_name = "browser"

/datum/js_error_file/proc/write_error(message, client/C)
	
	if(!file)
		file = file("[global.log_debug_js_directory]/[file_name].log")
		message_admins("JS error handler: log file '[file_name]' created for errors", reg_flag = R_DEBUG)

	if(blocked)
		return

	if(length(file) > file_size_limit)
		blocked = TRUE
		
		message_admins("JS error handler: File: '[file_name]' has exceeded the filesize limit of: [src.file_size_limit] bytes and will not be written further", reg_flag = R_DEBUG)
		log_debug("JS error handler: File: '[file_name]' has exceeded the filesize limit of: [src.file_size_limit] bytes and will not be written further")

		WRITE_FILE(file, "...file limit reached, following errors are not logged[log_end]")

		return

	message = "\[[time_stamp()]]: Client: \[[key_name(C)]\] triggered:\n[log_end] [message][log_end]"
	WRITE_FILE(file, message)