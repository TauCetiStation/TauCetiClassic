/*

Писал скорее для себя, как план. Список костылей расширяется, так что оставлю тут рядом.

	Отказался от идеи с отдельными sanitize и sanitize_output - все места вывода тех или иных строк крайне сложно поймать, переход на этот способ больше
	поломает, чем починит. "Работает - не лезь" (c)
	К тому же, затрагивается слишком большое количество файлов, что в будущем аукнется кучей конфликтов при мерже с бэем.

	sanitize_simple - если не указанны параметры, устраняет проблемные символы, заменяя в том числе "я"
	на заранее определенный символ LETTER_255 (на данный момент "¶").

	sanitize - отправляет текст в sanitize_simple, после чего декодирует и заменяет "¶" на последовательность "&#255;" - что подставляет "я"
	в чате игры.

	Большую часть строк, за исключением тех, над которыми могут еще проводиться какие-либо манипуляции(об этом ниже), или тех, которые используются
	только в popup окнах(об этом тоже ниже), сразу храним в варианте с "&#255;", так как чаще всего строки используются в чате.
	И еще по той причине, что в юникоде есть 255 символ, если что, а в аски 1103 нету.

	sanitize_popup - для правильного отображения текста, прошедшего через sanitize, в popup окнах. Все что делает - подменяет "&#255;" на "&#1103;"

	sanitize_alt - для строк, которые используются только или в большинстве случаев в окнах, аналогично sanitize, но подменяет "¶" на "&#1103;" (старый sanitize_u)

	sanitize_chat - для строк, прошедших sanitize_alt, но которые нам нужно показать в чате. Аналогична sanitize_popup, меняет "&#1103;" на "&#255;"

	И собственно то, ради чего все затевалось. Некоторые строки могут проходить через какие-то спец-обработки, прежде чем покажутся пользователю, как пример те же say у мобов.
	И в таких местах, где "я" по сути является последовательностью из 6-7 символов, последовательность имеет шанс быть разбитой, пользователь имеет шанс
	увидеть вместо "я" что-то вроде "&*25*;". К счастью, таких мест не много.
	Для таких строк мы проходимся санитайзом, не заменяя "¶" на последовательность. И уже после всех обработок, прежде чем показать строку пользователю, меняем "¶" на нужную
	нам последовательность.

	sanitize_plus - аналог sanitize, но не трогает "¶" после декодирования

	sanitize_plus_chat - подменяет "¶" на "&#255;"

	sanitize_plus_popup - подменяет "¶" на "&#1103;"

	Последнее,
	revert_ja - предполагалось заменять все костыли обратно на "я", прежде чем отправить текст в лог или окно ввода, но это пока затруднительно(с логами еще есть одна идейка)
	на данный момент просто меняет обратно на "¶" - как ни крути, это лучше всяки __255_ или y".


	Шпаргалки:

	В show_message нужно передавать уже финальный вариант сообщения
	Задания антагонистов хранятся в аски, в окнах необходимо доп обрабатывать(TODO)
	Бумага и книги с библиотекой используют сразу юникод вариант.
	ПДА тоже юникод, сообщения в чате через санитайз_чат.
	Как и ньюкастер

	Медикал и сикьюрити рекорды, флавор храним в аски, если их смотрят в отдельном окне - обрабатываем через sanitize_popup

*/
